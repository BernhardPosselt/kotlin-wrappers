// Generated by Karakum - do not modify it manually!

package node.inspector


@Suppress("NESTED_CLASS_IN_EXTERNAL_INTERFACE")
@seskar.js.JsVirtual
sealed external interface SessionEvent : node.events.EventType {
    sealed interface INSPECTORNOTIFICATION : SessionEvent
    sealed interface RUNTIME_EXECUTIONCONTEXTCREATED : SessionEvent
    sealed interface RUNTIME_EXECUTIONCONTEXTDESTROYED : SessionEvent
    sealed interface RUNTIME_EXECUTIONCONTEXTSCLEARED : SessionEvent
    sealed interface RUNTIME_EXCEPTIONTHROWN : SessionEvent
    sealed interface RUNTIME_EXCEPTIONREVOKED : SessionEvent
    sealed interface RUNTIME_CONSOLEAPICALLED : SessionEvent
    sealed interface RUNTIME_INSPECTREQUESTED : SessionEvent
    sealed interface DEBUGGER_SCRIPTPARSED : SessionEvent
    sealed interface DEBUGGER_SCRIPTFAILEDTOPARSE : SessionEvent
    sealed interface DEBUGGER_BREAKPOINTRESOLVED : SessionEvent
    sealed interface DEBUGGER_PAUSED : SessionEvent
    sealed interface DEBUGGER_RESUMED : SessionEvent
    sealed interface CONSOLE_MESSAGEADDED : SessionEvent
    sealed interface PROFILER_CONSOLEPROFILESTARTED : SessionEvent
    sealed interface PROFILER_CONSOLEPROFILEFINISHED : SessionEvent
    sealed interface HEAPPROFILER_ADDHEAPSNAPSHOTCHUNK : SessionEvent
    sealed interface HEAPPROFILER_RESETPROFILES : SessionEvent
    sealed interface HEAPPROFILER_REPORTHEAPSNAPSHOTPROGRESS : SessionEvent
    sealed interface HEAPPROFILER_LASTSEENOBJECTID : SessionEvent
    sealed interface HEAPPROFILER_HEAPSTATSUPDATE : SessionEvent
    sealed interface NODETRACING_DATACOLLECTED : SessionEvent
    sealed interface NODETRACING_TRACINGCOMPLETE : SessionEvent
    sealed interface NODEWORKER_ATTACHEDTOWORKER : SessionEvent
    sealed interface NODEWORKER_DETACHEDFROMWORKER : SessionEvent
    sealed interface NODEWORKER_RECEIVEDMESSAGEFROMWORKER : SessionEvent
    sealed interface NODERUNTIME_WAITINGFORDISCONNECT : SessionEvent

    companion object {
        @seskar.js.JsValue("inspectorNotification")
        val INSPECTORNOTIFICATION: INSPECTORNOTIFICATION

        @seskar.js.JsValue("Runtime.executionContextCreated")
        val RUNTIME_EXECUTIONCONTEXTCREATED: RUNTIME_EXECUTIONCONTEXTCREATED

        @seskar.js.JsValue("Runtime.executionContextDestroyed")
        val RUNTIME_EXECUTIONCONTEXTDESTROYED: RUNTIME_EXECUTIONCONTEXTDESTROYED

        @seskar.js.JsValue("Runtime.executionContextsCleared")
        val RUNTIME_EXECUTIONCONTEXTSCLEARED: RUNTIME_EXECUTIONCONTEXTSCLEARED

        @seskar.js.JsValue("Runtime.exceptionThrown")
        val RUNTIME_EXCEPTIONTHROWN: RUNTIME_EXCEPTIONTHROWN

        @seskar.js.JsValue("Runtime.exceptionRevoked")
        val RUNTIME_EXCEPTIONREVOKED: RUNTIME_EXCEPTIONREVOKED

        @seskar.js.JsValue("Runtime.consoleAPICalled")
        val RUNTIME_CONSOLEAPICALLED: RUNTIME_CONSOLEAPICALLED

        @seskar.js.JsValue("Runtime.inspectRequested")
        val RUNTIME_INSPECTREQUESTED: RUNTIME_INSPECTREQUESTED

        @seskar.js.JsValue("Debugger.scriptParsed")
        val DEBUGGER_SCRIPTPARSED: DEBUGGER_SCRIPTPARSED

        @seskar.js.JsValue("Debugger.scriptFailedToParse")
        val DEBUGGER_SCRIPTFAILEDTOPARSE: DEBUGGER_SCRIPTFAILEDTOPARSE

        @seskar.js.JsValue("Debugger.breakpointResolved")
        val DEBUGGER_BREAKPOINTRESOLVED: DEBUGGER_BREAKPOINTRESOLVED

        @seskar.js.JsValue("Debugger.paused")
        val DEBUGGER_PAUSED: DEBUGGER_PAUSED

        @seskar.js.JsValue("Debugger.resumed")
        val DEBUGGER_RESUMED: DEBUGGER_RESUMED

        @seskar.js.JsValue("Console.messageAdded")
        val CONSOLE_MESSAGEADDED: CONSOLE_MESSAGEADDED

        @seskar.js.JsValue("Profiler.consoleProfileStarted")
        val PROFILER_CONSOLEPROFILESTARTED: PROFILER_CONSOLEPROFILESTARTED

        @seskar.js.JsValue("Profiler.consoleProfileFinished")
        val PROFILER_CONSOLEPROFILEFINISHED: PROFILER_CONSOLEPROFILEFINISHED

        @seskar.js.JsValue("HeapProfiler.addHeapSnapshotChunk")
        val HEAPPROFILER_ADDHEAPSNAPSHOTCHUNK: HEAPPROFILER_ADDHEAPSNAPSHOTCHUNK

        @seskar.js.JsValue("HeapProfiler.resetProfiles")
        val HEAPPROFILER_RESETPROFILES: HEAPPROFILER_RESETPROFILES

        @seskar.js.JsValue("HeapProfiler.reportHeapSnapshotProgress")
        val HEAPPROFILER_REPORTHEAPSNAPSHOTPROGRESS: HEAPPROFILER_REPORTHEAPSNAPSHOTPROGRESS

        @seskar.js.JsValue("HeapProfiler.lastSeenObjectId")
        val HEAPPROFILER_LASTSEENOBJECTID: HEAPPROFILER_LASTSEENOBJECTID

        @seskar.js.JsValue("HeapProfiler.heapStatsUpdate")
        val HEAPPROFILER_HEAPSTATSUPDATE: HEAPPROFILER_HEAPSTATSUPDATE

        @seskar.js.JsValue("NodeTracing.dataCollected")
        val NODETRACING_DATACOLLECTED: NODETRACING_DATACOLLECTED

        @seskar.js.JsValue("NodeTracing.tracingComplete")
        val NODETRACING_TRACINGCOMPLETE: NODETRACING_TRACINGCOMPLETE

        @seskar.js.JsValue("NodeWorker.attachedToWorker")
        val NODEWORKER_ATTACHEDTOWORKER: NODEWORKER_ATTACHEDTOWORKER

        @seskar.js.JsValue("NodeWorker.detachedFromWorker")
        val NODEWORKER_DETACHEDFROMWORKER: NODEWORKER_DETACHEDFROMWORKER

        @seskar.js.JsValue("NodeWorker.receivedMessageFromWorker")
        val NODEWORKER_RECEIVEDMESSAGEFROMWORKER: NODEWORKER_RECEIVEDMESSAGEFROMWORKER

        @seskar.js.JsValue("NodeRuntime.waitingForDisconnect")
        val NODERUNTIME_WAITINGFORDISCONNECT: NODERUNTIME_WAITINGFORDISCONNECT
    }
}
