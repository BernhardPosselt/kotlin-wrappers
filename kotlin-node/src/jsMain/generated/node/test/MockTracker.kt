// Generated by Karakum - do not modify it manually!


package node.test


sealed external interface MockTracker {
    /**
     * This function is used to create a mock function.
     * @param original An optional function to create a mock on.
     * @param implementation An optional function used as the mock implementation for `original`.
     *  This is useful for creating mocks that exhibit one behavior for a specified number of calls and then restore the behavior of `original`.
     * @param options Optional configuration options for the mock function.
     */
    fun <F : Function<*> /* default is NoOpFunction */> fn(
        original: F = definedExternally,
        options: MockFunctionOptions = definedExternally,
    ): Mock<F>

    fun <F : Function<*> /* default is NoOpFunction */> fn(
        original: F = definedExternally,
        implementation: Function<*> = definedExternally,
        options: MockFunctionOptions = definedExternally,
    ): Mock<Function<*>>

    /**
     * This function is used to create a mock on an existing object method.
     * @param object The object whose method is being mocked.
     * @param methodName The identifier of the method on `object` to mock. If `object[methodName]` is not a function, an error is thrown.
     * @param implementation An optional function used as the mock implementation for `object[methodName]`.
     * @param options Optional configuration options for the mock method.
     */
    fun method(`object`: Any, methodName: String, options: MockFunctionOptions = definedExternally): Mock<Function<*>>
    fun method(
        `object`: Any,
        methodName: String,
        implementation: Function<*>,
        options: MockFunctionOptions = definedExternally,
    ): Mock<Function<*>>

    fun method(`object`: Any, methodName: String, options: MockMethodOptions): Mock<Function<*>>
    fun method(
        `object`: Any,
        methodName: String,
        implementation: Function<*>,
        options: MockMethodOptions,
    ): Mock<Function<*>>

    /**
     * This function is syntax sugar for {@link MockTracker.method} with `options.getter` set to `true`.
     */
    fun getter(`object`: Any, methodName: String, options: MockFunctionOptions = definedExternally): Mock<() -> Any?>
    fun getter(
        `object`: Any,
        methodName: String,
        implementation: Function<*> = definedExternally,
        options: MockFunctionOptions = definedExternally,
    ): Mock<Function<*>>

    /**
     * This function is syntax sugar for {@link MockTracker.method} with `options.setter` set to `true`.
     */
    fun setter(
        `object`: Any,
        methodName: String,
        options: MockFunctionOptions = definedExternally,
    ): Mock<(value: Any?) -> Unit>

    fun setter(
        `object`: Any,
        methodName: String,
        implementation: Function<*> = definedExternally,
        options: MockFunctionOptions = definedExternally,
    ): Mock<Function<*>>

    /**
     * This function restores the default behavior of all mocks that were previously created by this `MockTracker`
     * and disassociates the mocks from the `MockTracker` instance. Once disassociated, the mocks can still be used,
     * but the `MockTracker` instance can no longer be used to reset their behavior or otherwise interact with them.
     *
     * After each test completes, this function is called on the test context's `MockTracker`.
     * If the global `MockTracker` is used extensively, calling this function manually is recommended.
     */
    fun reset(): Unit

    /**
     * This function restores the default behavior of all mocks that were previously created by this `MockTracker`.
     * Unlike `mock.reset()`, `mock.restoreAll()` does not disassociate the mocks from the `MockTracker` instance.
     */
    fun restoreAll(): Unit
}
