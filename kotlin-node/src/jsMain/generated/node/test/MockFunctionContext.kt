// Generated by Karakum - do not modify it manually!


package node.test


sealed external interface MockFunctionContext<F : Function<*>> {
    /**
     * A getter that returns a copy of the internal array used to track calls to the mock.
     */
    val calls: Array<MockFunctionCall<F, *, *>>

    /**
     * This function returns the number of times that this mock has been invoked.
     * This function is more efficient than checking `ctx.calls.length`
     * because `ctx.calls` is a getter that creates a copy of the internal call tracking array.
     */
    fun callCount(): Double

    /**
     * This function is used to change the behavior of an existing mock.
     * @param implementation The function to be used as the mock's new implementation.
     */
    fun mockImplementation(implementation: Function<*>): Unit

    /**
     * This function is used to change the behavior of an existing mock for a single invocation.
     * Once invocation `onCall` has occurred, the mock will revert to whatever behavior
     * it would have used had `mockImplementationOnce()` not been called.
     * @param implementation The function to be used as the mock's implementation for the invocation number specified by `onCall`.
     * @param onCall The invocation number that will use `implementation`.
     *  If the specified invocation has already occurred then an exception is thrown.
     */
    fun mockImplementationOnce(implementation: Function<*>, onCall: Number = definedExternally): Unit

    /**
     * Resets the call history of the mock function.
     */
    fun resetCalls(): Unit

    /**
     * Resets the implementation of the mock function to its original behavior.
     * The mock can still be used after calling this function.
     */
    fun restore(): Unit
}
