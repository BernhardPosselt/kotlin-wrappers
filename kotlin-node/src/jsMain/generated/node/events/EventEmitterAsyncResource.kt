// Generated by Karakum - do not modify it manually!

@file:JsModule("node:events")
@file:JsQualifier("EventEmitter")

package node.events


/**
 * Integrates `EventEmitter` with `AsyncResource` for `EventEmitter`s that require
 * manual async tracking. Specifically, all events emitted by instances of
 * `EventEmitterAsyncResource` will run within its async context.
 *
 * The EventEmitterAsyncResource class has the same methods and takes the
 * same options as EventEmitter and AsyncResource themselves.
 * @throws if `options.name` is not provided when instantiated directly.
 * @since v17.4.0, v16.14.0
 */

external class EventEmitterAsyncResource : EventEmitter {
    /**
     * @param options Only optional in child class.
     */
    constructor (options: EventEmitterAsyncResourceOptions = definedExternally)

    /**
     * Call all destroy hooks. This should only ever be called once. An
     * error will be thrown if it is called more than once. This must be
     * manually called. If the resource is left to be collected by the GC then
     * the destroy hooks will never be called.
     */
    fun emitDestroy(): Unit

    /** The unique asyncId assigned to the resource. */
    val asyncId: Double

    /** The same triggerAsyncId that is passed to the AsyncResource constructor. */
    val triggerAsyncId: Double

    /** The underlying AsyncResource */
    val asyncResource: EventEmitterReferencingAsyncResource
}
